// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IsFeatureEnabledRequestPayload is feature enabled request payload
// swagger:model IsFeatureEnabledRequestPayload
type IsFeatureEnabledRequestPayload struct {

	// Feature is the Name of the Release Flag that is needed to be checked for enrollment
	// Required: true
	Feature *string `json:"feature"`

	// PilotID is the public unique ID of the pilot who's enrollment needs to be checked.
	// Required: true
	PilotID *string `json:"id"`
}

// Validate validates this is feature enabled request payload
func (m *IsFeatureEnabledRequestPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePilotID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IsFeatureEnabledRequestPayload) validateFeature(formats strfmt.Registry) error {

	if err := validate.Required("feature", "body", m.Feature); err != nil {
		return err
	}

	return nil
}

func (m *IsFeatureEnabledRequestPayload) validatePilotID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.PilotID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IsFeatureEnabledRequestPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IsFeatureEnabledRequestPayload) UnmarshalBinary(b []byte) error {
	var res IsFeatureEnabledRequestPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

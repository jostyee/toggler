// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/toggler-io/toggler/lib/go/models"
)

// CreateReleaseFlagReader is a Reader for the CreateReleaseFlag structure.
type CreateReleaseFlagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateReleaseFlagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateReleaseFlagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateReleaseFlagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateReleaseFlagInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateReleaseFlagOK creates a CreateReleaseFlagOK with default headers values
func NewCreateReleaseFlagOK() *CreateReleaseFlagOK {
	return &CreateReleaseFlagOK{}
}

/*CreateReleaseFlagOK handles this case with default header values.

CreateRolloutFeatureFlagResponse returns information about the requester's rollout feature enrollment status.
*/
type CreateReleaseFlagOK struct {
	Payload interface{}
}

func (o *CreateReleaseFlagOK) Error() string {
	return fmt.Sprintf("[POST /rollout/flag/create.json][%d] createReleaseFlagOK  %+v", 200, o.Payload)
}

func (o *CreateReleaseFlagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReleaseFlagBadRequest creates a CreateReleaseFlagBadRequest with default headers values
func NewCreateReleaseFlagBadRequest() *CreateReleaseFlagBadRequest {
	return &CreateReleaseFlagBadRequest{}
}

/*CreateReleaseFlagBadRequest handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type CreateReleaseFlagBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateReleaseFlagBadRequest) Error() string {
	return fmt.Sprintf("[POST /rollout/flag/create.json][%d] createReleaseFlagBadRequest  %+v", 400, o.Payload)
}

func (o *CreateReleaseFlagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReleaseFlagInternalServerError creates a CreateReleaseFlagInternalServerError with default headers values
func NewCreateReleaseFlagInternalServerError() *CreateReleaseFlagInternalServerError {
	return &CreateReleaseFlagInternalServerError{}
}

/*CreateReleaseFlagInternalServerError handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type CreateReleaseFlagInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateReleaseFlagInternalServerError) Error() string {
	return fmt.Sprintf("[POST /rollout/flag/create.json][%d] createReleaseFlagInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateReleaseFlagInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

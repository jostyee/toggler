// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
<<<<<<< Updated upstream
		size:    17741,
		modtime: 1568556972,
=======
		size:    16928,
		modtime: 1568556940,
>>>>>>> Stashed changes
		compressed: `
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
IEIAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}

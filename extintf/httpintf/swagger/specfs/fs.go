// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    17741,
		modtime: 1568556972,
		compressed: `
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
8ujT/wUAAP//sT5AUk1FAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
